scopeName: "source.cs"
name: "C#"
fileTypes: [
  "cs"
]
foldingStartMarker: "^\\s*#\\s*region|^\\s*/\\*|^(?![^{]*?//|[^{]*?/\\*(?!.*?\\*/.*?\\{)).*?\\{\\s*($|//|/\\*(?!.*?\\*/.*\\S))"
foldingStopMarker: "^\\s*#\\s*endregion|^\\s*\\*/|^\\s*\\}"
patterns: [
  {
    include: "#using"
  }
  {
    include: "#namespace"
  }
  {
    include: "#code"
  }
]
repository:
  using:
    begin: "^\\s*(using)\\b\\s*"
    captures:
      "1":
        name: "keyword.other.using.cs"
    patterns: [
      {
        match: "\\s*static\\b"
        name: "keyword.other.static.cs"
      }
      {
        include: "#comments"
      }
      {
        begin: "(\\w+)\\s*=\\s*"
        beginCaptures:
          "1":
            name: "entity.name.alias.namespace.cs"
        patterns: [
          {
            include: "#comments"
          }
          {
            match: "[\\w.]+"
            name: "entity.name.type.namespace.cs"
          }
        ]
        end: "\\s+"
      }
      {
        match: "[\\w.]+"
        name: "entity.name.type.namespace.cs"
      }
    ]
    end: "\\s*(?:$|;)"
  namespace:
    begin: "^\\s*[^@]?((namespace)\\s+([\\w.]+))"
    beginCaptures:
      "1":
        name: "meta.namespace.identifier.cs"
      "2":
        name: "keyword.other.namespace.cs"
      "3":
        name: "entity.name.type.namespace.cs"
    end: "}"
    endCaptures:
      "0":
        name: "punctuation.section.namespace.end.cs"
    name: "meta.namespace.cs"
    patterns: [
      {
        begin: "{"
        beginCaptures:
          "0":
            name: "punctuation.section.namespace.begin.cs"
        end: "(?=})"
        name: "meta.namespace.body.cs"
        patterns: [
          {
            include: "#using"
          }
          {
            include: "#namespace"
          }
          {
            include: "#code"
          }
        ]
      }
    ]
  "field-declaration":
    begin: "(?=(?:(?:(?:private|public|volatile|internal|protected|static|readonly|const|event|extern)\\s*)*)(?:[\\w\\s?*,<>\\[\\]]+?)(?:[\\w]+)\\s*(?:;|=|=>))"
    end: "(?=;)"
    patterns: [
      {
        match: "^\\s*((?:(?:private|public|volatile|internal|protected|static|readonly|const|event)\\s*)*)\\s*(.+?)\\s*([\\w]+)\\s*(?=;|=)"
        captures:
          "1":
            patterns: [
              {
                include: "#storage-modifiers"
              }
            ]
          "2":
            patterns: [
              {
                include: "#type"
              }
            ]
          "3":
            name: "entity.name.variable.cs"
        name: "meta.field.cs"
      }
      {
        begin: "(?==>?)"
        end: "(?=;|$)"
        patterns: [
          {
            include: "#code"
          }
        ]
      }
    ]
  variable:
    patterns: [
      {
        match: "^\\s*\\b(var)\\s+(.*?)(?=(=|;))"
        captures:
          "1":
            name: "keyword.other.var.cs"
      }
      {
        match: "^\\s*\\b(?!var|return|yield|throw)([\\w<>*?\\[\\]]+)\\s+([\\w]+)\\s*(?=(=(?!=)|;))"
        captures:
          "1":
            name: "storage.type.variable.cs"
      }
    ]
  block:
    patterns: [
      {
        begin: "{"
        beginCaptures:
          "0":
            name: "punctuation.section.block.begin.cs"
        end: "}"
        endCaptures:
          "0":
            name: "punctuation.section.block.end.cs"
        name: "meta.block.cs"
        patterns: [
          {
            include: "#code"
          }
        ]
      }
    ]
  builtinTypes:
    patterns: [
      {
        match: "\\b(bool|byte|sbyte|char|decimal|double|enum|float|int|uint|long|ulong|short|ushort)\\s*(\\?|\\*)?\\s*"
        name: "storage.value.type.cs"
        captures:
          "2":
            name: "punctuation.storage.type.modifier.cs"
      }
      {
        match: "\\b(dynamic|object|string)\\s*(\\*)?\\b"
        name: "storage.reference.type.cs"
        captures:
          "2":
            name: "punctuation.storage.type.modifier.cs"
      }
    ]
  type:
    patterns: [
      {
        match: "([\\w\\.]+\\s*<(?:[\\w\\s,\\.`\\[\\]\\*]+|\\g<1>)+>(?:\\s*\\[\\s*\\])?)"
        comment: "generic type"
        captures:
          "1":
            name: "storage.type.cs"
      }
      {
        match: "\\b([a-zA-Z]+[\\w\\.]*\\b(?:\\s*\\[\\s*\\])?)(\\?|\\*?)"
        comment: "non-generic type"
        captures:
          "1":
            name: "storage.type.cs"
          "2":
            name: "punctuation.storage.type.modifier.cs"
      }
    ]
  "generic-constraints":
    begin: "(where)\\s+(\\w+)\\s*:"
    end: "(?=where|{|$)"
    beginCaptures:
      "1":
        name: "keyword.other.cs"
      "2":
        name: "storage.type.cs"
    patterns: [
      {
        match: "\\b(class|struct)\\b"
        name: "keyword.other.cs"
      }
      {
        match: "(new)\\s*\\(\\s*\\)"
        captures:
          "1":
            name: "keyword.other.cs"
      }
      {
        include: "#type"
      }
      {
        include: "#generic-constraints"
      }
    ]
  "type-declaration":
    begin: "(?=\\w?[\\w\\s]*[^@]?(?:class|struct|interface|enum)\\s+\\w+)"
    end: "}"
    endCaptures:
      "0":
        name: "punctuation.section.class.end.cs"
    name: "meta.class.cs"
    patterns: [
      {
        include: "#storage-modifiers"
      }
      {
        include: "#comments"
      }
      {
        begin: "(class|struct|interface|enum)\\s+"
        end: "(?={|:|$|where)"
        name: "meta.class.identifier.cs"
        beginCaptures:
          "1":
            name: "storage.modifier.cs"
        patterns: [
          {
            include: "#type"
          }
        ]
      }
      {
        begin: ":"
        end: "(?={|where)"
        patterns: [
          {
            include: "#type"
          }
          {
            match: "([\\w<>]+)\\s*"
            captures:
              "1":
                name: "storage.type.cs"
          }
        ]
      }
      {
        include: "#generic-constraints"
      }
      {
        begin: "{"
        beginCaptures:
          "0":
            name: "punctuation.section.class.begin.cs"
        end: "(?=})"
        name: "meta.class.body.cs"
        patterns: [
          {
            include: "#type-body"
          }
        ]
      }
    ]
  "type-body":
    patterns: [
      {
        include: "#type-declaration"
      }
      {
        include: "#field-declaration"
      }
      {
        include: "#property-declaration"
      }
      {
        include: "#method"
      }
      {
        include: "#storage-modifiers"
      }
      {
        include: "#code"
      }
    ]
  code:
    patterns: [
      {
        include: "#block"
      }
      {
        include: "#annotation"
      }
      {
        include: "#comments"
      }
      {
        include: "#type-declaration"
      }
      {
        include: "#variable"
      }
      {
        include: "#constants"
      }
      {
        include: "#storage-modifiers"
      }
      {
        include: "#keywords"
      }
      {
        include: "#preprocessor"
      }
      {
        include: "#method-call"
      }
      {
        include: "#builtinTypes"
      }
      {
        include: "#documentation"
      }
    ]
  comments:
    patterns: [
      {
        begin: "///"
        captures:
          "0":
            name: "punctuation.definition.comment.cs"
        end: "$\\n?"
        name: "comment.block.documentation.cs"
        patterns: [
          {
            include: "text.xml"
          }
        ]
      }
      {
        begin: "/\\*"
        captures:
          "0":
            name: "punctuation.definition.comment.cs"
        end: "\\*/\\n?"
        name: "comment.block.cs"
      }
      {
        begin: "//"
        captures:
          "1":
            name: "punctuation.definition.comment.cs"
        end: "$\\n?"
        name: "comment.line.double-slash.cs"
      }
    ]
  "string-interpolated":
    patterns: [
      {
        begin: "\\$\""
        end: "\"|$"
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.cs"
        endCaptures:
          "0":
            name: "punctuation.definition.string.end.cs"
        patterns: [
          {
            begin: "([^{}]+?)(?={|\"|$)"
            end: "(?={|\"|$)"
            beginCaptures:
              "1":
                name: "string.quoted.double.cs"
          }
          {
            begin: "{"
            end: "}"
            name: "meta.interpolated.expression.cs"
            patterns: [
              {
                include: "#code"
              }
            ]
          }
          {
            begin: "([^{}]+?)(?={|\"|$)"
            end: "(?={|\"|$)"
            beginCaptures:
              "1":
                name: "string.quoted.double.cs"
          }
        ]
      }
    ]
  "string-interpolated-verbatim":
    patterns: [
      {
        begin: "\\$@\""
        end: "\""
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.cs"
        endCaptures:
          "0":
            name: "punctuation.definition.string.end.cs"
        patterns: [
          {
            begin: "([^{}]+?)(?={|\"|$)"
            end: "(?={|\"|$)"
            beginCaptures:
              "1":
                name: "string.quoted.double.literal.cs"
          }
          {
            begin: "{"
            end: "}"
            name: "meta.interpolated.expression.cs"
            patterns: [
              {
                include: "#code"
              }
            ]
          }
          {
            begin: "([^{}]+?)(?={|\"|$)"
            end: "(?={|\"|$)"
            beginCaptures:
              "1":
                name: "string.quoted.double.literal.cs"
          }
        ]
      }
    ]
  string:
    patterns: [
      {
        include: "#string-interpolated-verbatim"
      }
      {
        include: "#string-interpolated"
      }
      {
        captures:
          "0":
            name: "punctuation.definition.string.begin.cs"
        match: "@\"([^\"]|\"\")*\""
        name: "string.quoted.double.literal.cs"
      }
      {
        begin: "\""
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.cs"
        end: "\""
        endCaptures:
          "0":
            name: "punctuation.definition.string.end.cs"
        name: "string.quoted.double.cs"
        patterns: [
          {
            match: "\\\\."
            name: "constant.character.escape.cs"
          }
        ]
      }
      {
        begin: "'"
        beginCaptures:
          "0":
            name: "punctuation.definition.string.begin.cs"
        end: "'"
        endCaptures:
          "0":
            name: "punctuation.definition.string.end.cs"
        name: "string.quoted.single.cs"
        patterns: [
          {
            match: "\\\\."
            name: "constant.character.escape.cs"
          }
        ]
      }
    ]
  constants:
    patterns: [
      {
        match: "\\b(true|false|null|this|base)\\b"
        name: "constant.language.cs"
      }
      {
        match: "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(?i:f|d|m|u|l|ul|lu)?\\b"
        name: "constant.numeric.cs"
      }
      {
        include: "#string"
      }
    ]
  keywords:
    patterns: [
      {
        match: "\\b(if|else|while|for|foreach|in|do|return|continue|break|switch|case|default|goto|throw|try|catch|finally|lock|yield|await|when)\\b"
        name: "keyword.control.cs"
      }
      {
        match: "\\b(from|where|select|group|into|orderby|join|let|on|equals|by|ascending|descending)\\b"
        name: "keyword.linq.cs"
      }
      {
        match: "\\b(new|is|as|using|checked|unchecked|typeof|sizeof|override|readonly|stackalloc|nameof)\\b"
        name: "keyword.operator.cs"
      }
      {
        match: "\\b(event|delegate|fixed|add|remove|set|get|value|alias|global)\\b"
        name: "keyword.other.cs"
      }
    ]
  annotation:
    begin: "\\["
    beginCaptures:
      "0":
        name: "punctuation.section.annotation.begin.cs"
    end: "\\]"
    endCaptures:
      "0":
        name: "punctuation.section.annotation.end.cs"
    name: "meta.annotation.cs"
    patterns: [
      {
        include: "#constants"
      }
      {
        include: "#preprocessor"
      }
      {
        include: "#builtinTypes"
      }
      {
        include: "#comments"
      }
      {
        include: "#attribute"
      }
    ]
  attribute:
    patterns: [
      {
        match: ','
        name: 'punctuation.definition.separator.parameter.cs'
      }
      {
        comment: "attribute with parameters"
        begin: "([\\w$]+)\\s*(?=\\()"
        beginCaptures:
          "1":
            name: "entity.name.attribute.cs"
        end: "\\)"
        endCaptures:
          "0":
            name: "punctuation.definition.attribute.parameters.end.cs"
        name: "meta.attribute.cs"
        patterns: [
            comments: "parameters"
            begin: "\\("
            beginCaptures:
              "0":
                name: "punctuation.definition.attribute.parameters.begin.cs"
            end: "(?=\\))"
            name: "meta.attribute.parameters.body.cs"
            patterns: [
              {
                comment: "named parameters (key)"
                begin: "([\\w$]+)\\s*(=)\\s*"
                beginCaptures:
                  "1":
                    name: "entity.key.parameter.attribute.cs"
                  "2":
                    name: "keyword.operator.assignment.cs"
                end: "(?:(,)|(?=[\\)]))"
                endCaptures:
                  "1":
                    name: "punctuation.definition.separator.parameter.cs"
                patterns: [
                  {
                    comment: "named parameters (value)"
                    match: "[^\",\\s\\)]+"
                    captures:
                      "0":
                        name: "entity.value.parameter.attribute.cs"
                  }
                ]
              }
              {
                comment: "positional parameter expressions"
                begin: "([\\w]+\\s*\\(\\s*[\\w]+\\s*\\))"
                beginCaptures:
                  "1":
                    name: "entity.value.parameter.attribute.cs"
                end: "(?:(,)|(?=[\\)]))"
                endCaptures:
                  "1":
                    name: "punctuation.definition.separator.parameter.cs"
              }
              {
                comment: "positional parameters (value)"
                begin: "\"?([^\",\\s\\)]+)"
                beginCaptures:
                  "1":
                    name: "entity.value.parameter.attribute.cs"
                end: "(?:(,)|(?=[\\)]))"
                endCaptures:
                  "1":
                    name: "punctuation.definition.separator.parameter.cs"
              }
            ]
          ]
      }
      {
        comment: "attribute without parameters"
        match: "[\\w$]+"
        captures:
          "0":
            name: "entity.name.attribute.cs"
        name: "meta.attribute.cs"
      }
    ]
  "property-declaration":
    begin: "^\\s*(?!.*\\b(?:class|interface|struct)\\b)((?:\\w+\\s+)*?)(?!(?:private|public|internal|protected|static|new|virtual|override))(\\w.+?)\\s+((?:\\w+<[^>]+>.)?\\w+)\\s*(?={|$)"
    end: "}|;|$"
    beginCaptures:
      "1":
        patterns: [
          {
            include: "#storage-modifiers"
          }
        ]
      "2":
        patterns: [
          {
            include: "#type"
          }
        ]
      "3":
        name: "entity.name.function.cs"
    name: "meta.property.cs"
    patterns: [
      {
        include: "#block"
      }
      {
        begin: "="
        end: "(?=;)"
        patterns: [
          {
            include: "#code"
          }
        ]
      }
    ]
  method:
    patterns: [
      {
        begin: "(?=\\bnew\\s+)(?=[\\w<].*\\s+)(?=[^=]+\\()"
        end: "(?={|;)"
        name: "meta.new-object.cs"
        patterns: [
          {
            include: "#code"
          }
        ]
      }
      {
        begin: "(?<!=|=\\s)(?!new)(?!.*(=|\\/\\/|\\/\\*).*\\()(?=[\\w<].*\\s+.+\\()"
        end: "(})|(?=;)"
        endCaptures:
          "1":
            name: "punctuation.section.method.end.cs"
        name: "meta.method.cs"
        patterns: [
          {
            include: "#storage-modifiers"
          }
          {
            include: "#builtinTypes"
          }
          {
            begin: "([\\w]+\\s*(?:<[\\w<>\\s,`?]*>)?)\\s*\\("
            beginCaptures:
              "1":
                name: "entity.name.function.cs"
            end: "\\)"
            name: "meta.method.identifier.cs"
            patterns: [
              {
                include: "#parameters"
              }
              {
                include: "#constants"
              }
              {
                include: "#comments"
              }
              {
                include: "#builtinTypes"
              }
            ]
          }
          {
            begin: "(?=\\w.*\\s+[\\w.]+\\s*\\()"
            end: "(?=[\\w.]+\\s*\\()"
            name: "meta.method.return-type.cs"
            patterns: [
              {
                match: "\\bvoid\\b"
                name: "storage.type.cs"
              }
              {
                include: "#builtinTypes"
              }
            ]
          }
          {
            begin: ":\\s*(this|base)\\s*\\("
            beginCaptures:
              "1":
                name: "constant.language.cs"
            end: "\\)"
            name: "meta.method.base-call.cs"
            patterns: [
              {
                include: "#builtinTypes"
              }
            ]
          }
          {
            include: "#comments"
          }
          {
            begin: "=>"
            beginCaptures:
              "0":
                name: "punctuation.section.method.begin.cs"
            end: "(?=;)"
            name: "meta.method.body.cs"
            patterns: [
              {
                include: "#code"
              }
            ]
          }
          {
            begin: "{"
            beginCaptures:
              "0":
                name: "punctuation.section.method.begin.cs"
            end: "(?=})"
            name: "meta.method.body.cs"
            patterns: [
              {
                include: "#code"
              }
            ]
          }
        ]
      }
    ]
  "method-call":
    begin: "([\\w$]+)\\s*(\\()"
    beginCaptures:
      "1":
        name: "meta.method.cs"
      "2":
        name: "punctuation.definition.method-parameters.begin.cs"
    end: "\\)"
    endCaptures:
      "0":
        name: "punctuation.definition.method-parameters.end.cs"
    name: "meta.method-call.cs"
    patterns: [
      {
        match: ","
        name: "punctuation.definition.separator.parameter.cs"
      }
      {
        include: "#code"
      }
    ]
  parameters:
    begin: "\\b(ref|params|out)?\\s*\\b(\\w+(?:\\s*<.*?>)?(?:\\s*\\*)*(?:\\s*\\?)?(?:\\s*\\[.*?\\])?)\\s+(@?\\w+)\\s*(=)?"
    beginCaptures:
      "1":
        name: "storage.type.modifier.cs"
      "2":
        name: "storage.type.generic.cs"
      "3":
        name: "variable.parameter.function.cs"
      "4":
        name: "keyword.operator.assignment.cs"
    end: "(?:(,)|(?=[\\)]))"
    endCaptures:
      "1":
        name: "punctuation.definition.separator.parameter.cs"
    patterns: [
      {
        include: "#constants"
      }
      {
        include: "#block"
      }
      {
        include: "#builtinTypes"
      }
    ]
  preprocessor:
    patterns: [
      {
        captures:
          "1":
            name: "meta.directive.preprocessor.cs"
          "3":
            name: "entity.name.preprocessor.cs"
        match: "^\\s*(#\\s*(if|else|elif|endif|define|undef|warning|error|line|pragma|region|endregion))\\b\\s*(.*?)(?=$|\\/\\/)"
        name: "meta.preprocessor.cs"
      }
    ]
  "storage-modifiers":
    match: "\\b(event|delegate|internal|public|protected|private|static|const|new|sealed|abstract|virtual|override|extern|unsafe|readonly|volatile|implicit|explicit|operator|async|partial|alias)\\b"
    name: "storage.modifier.cs"
